version: "3.8"

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.9
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: docker.io/bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/bitnami
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
  elasticsearch:
    image: elasticsearch:8.5.0
    container_name: elasticsearch
    volumes:
      - es_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - cluster.name=elasticsearch
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
    ports:
      - "9200:9200"
  keycloak:
    image: keycloak/keycloak
    container_name: keycloak
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json
    depends_on:
      - postgres
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_USERNAME: tuanha
      KC_DB_PASSWORD: tuanha
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
    ports:
      - "8080:8080"
  postgres:
    image: debezium/postgres:10
    container_name: postgres
    environment:
      POSTGRES_USER: tuanha
      POSTGRES_PASSWORD: tuanha
      POSTGRES_MULTIPLE_DATABASES: users,posts,comments,feeds,keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./multi-dbs:/docker-entrypoint-initdb.d
  authorization-server:
    image: authorization-server
    container_name: authorization-server
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    depends_on:
      - kafka
      - keycloak
      - gateway
      - discovery-service
  comments-service:
    image: comments-service
    container_name: comments-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    depends_on:
      - kafka
      - postgres
      - gateway
      - discovery-service
  feeds-service:
    image: feeds-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    depends_on:
      - kafka
      - postgres
      - posts-service
      - gateway
      - discovery-service
  medias-service:
    image: medias-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    depends_on:
      - kafka
      - gateway
      - discovery-service
  users-service:
    image: users-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - kafka
      - postgres
      - gateway
      - discovery-service
  posts-service:
    image: posts-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    depends_on:
      - kafka
      - postgres
      - gateway
      - discovery-service
  search-service:
    image: search-service
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    depends_on:
      - kafka
      - gateway
      - discovery-service
      - elasticsearch
    environment:
      KAFKA_HOST: kafka
      ELASTICSEARCH_HOST: elasticsearch
      SPRING_ELASTICSEARCH_URIS: elasticsearch:9200
      SPRING_DATA_ELASTICSEARCH_CLUSTERNODES: elasticsearch:9200
      SPRING_DATA_ELASTICSEARCH_CLUSTERNAME: elasticsearch
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "4318:4318"
    environment:
        - COLLECTOR_OTLP_ENABLED=true
  debezium:
    image: debezium/connect:latest
    container_name: debezium
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
    depends_on:
      - kafka
      - postgres

  gateway:
    container_name: "tufun-api-gateway"
    image: tufun-api-gateway
    restart: always
    build:
      context: ./services/tufun-api-gateway
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      - discovery-service
      - keycloak
    environment:
      - EUREKA_URL=http://discovery-service:8081
      - KEYCLOAK_URL=keycloak
  discovery-service:
    container_name: "tufun-service-registry"
    image: tufun-service-registry
    restart: always
    build:
      context: ./services/tufun-service-registry
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
  redis:
    image: redis:latest
    container_name: my-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
volumes:
  zookeeper_data:
  kafka_data:
  postgres_data:
  es_data:
  redis_data:


